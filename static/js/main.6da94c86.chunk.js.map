{"version":3,"sources":["icons/JerkdeFilet1.ai.svg","Components/Logo.js","Components/Main.js","Components/Footer.js","Components/Notify.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","src","JerkdeFilet1","Main","to","class","Footer","Notify","props","handleChange","e","setState","target","name","value","emailverification","state","email","toast","error","success","type","placeholder","onChange","this","required","onClick","draggable","transition","Zoom","autoClose","Component","App","loading","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,6C,wOCW5BC,MARf,WACI,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKC,QC6BPC,MA/Bf,WACI,OACI,yBAAKH,UAAU,aACX,yBAAKA,UAAU,YACX,6BACI,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,MACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,cAAd,gBACA,wBAAIA,UAAU,aAAd,4BAEJ,yBAAKA,UAAU,YACX,kBAAC,IAAD,CAAMI,GAAG,SACL,yBAAKC,MAAM,UACP,0BAAMA,MAAM,iBACZ,0BAAMA,MAAM,gBAAZ,cACA,0BAAMA,MAAM,kCAAZ,qBCXjBC,MARf,WACI,OACI,yBAAKN,UAAU,UACX,wBAAIA,UAAU,eAAd,6B,gBC4CGO,G,wDA5CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,aAAe,SAAAC,GACX,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAP3B,EASnBC,kBAAoB,WACQ,KAArB,EAAKC,MAAMC,MACVC,IAAMC,MAAM,4BAGJD,IAAME,QAAQ,2BAZ1B,EAAKJ,MAAQ,CACTC,MAAO,IAHI,E,qDAoBf,OACI,yBAAKjB,UAAU,eACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,eAAd,+BACA,kBAAC,IAAD,CAAMI,GAAG,KAAI,uBAAGC,MAAM,kBACtB,wBAAIL,UAAU,aAAd,qCAEJ,yBAAKA,UAAU,UACX,6BACI,2BAAOqB,KAAK,QAAQC,YAAY,yBAAyBT,KAAK,QAAQU,SAAUC,KAAKf,aAAcgB,UAAQ,KAE/G,yBAAKpB,MAAM,cACP,yBAAKL,UAAU,SAAS0B,QAASF,KAAKT,mBAClC,0BAAMV,MAAM,iBACZ,0BAAMA,MAAM,gBAAZ,eACA,0BAAMA,MAAM,kCAAZ,kBAIZ,kBAAC,IAAD,CAAgBsB,WAAW,EAAOC,WAAYC,IAAMC,UAAW,W,GAxC1DC,cCwBNC,E,4MApBbhB,MAAQ,CACNiB,SAAS,G,uDAGT,OAEE,kBAAC,IAAD,KACE,yBAAKjC,UAAU,OACf,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,QAAQC,UAAW7B,KAEvC,kBAAC,EAAD,Y,GAbQwB,aCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.6da94c86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JerkdeFilet1.ai.d34ff811.svg\";","import React from 'react'\nimport JerkdeFilet1 from '../icons/JerkdeFilet1.ai.svg'\n\nfunction Logo() {\n    return (\n        <div className='logo'>\n            <img src={JerkdeFilet1} />\n        </div>\n    )\n}\n\nexport default Logo\n","import React from 'react'\nimport Logo from './Logo'\nimport { Link } from 'react-router-dom'\n\nfunction Main() {\n    return (\n        <div className='main-page'>\n            <div className='main-box'>\n                <div>\n                    <Logo />\n                </div>\n                <div className='cm'>\n                    <div className='coming-soon'>\n                        <h1 className='main-title'>Coming soon.</h1>\n                        <h1 className='main-text'>Made from filet mignion</h1>\n                    </div>\n                    <div className='main-btn'>\n                        <Link to='/more'>\n                            <div class=\"button\">\n                                <span class=\"button__mask\"></span>\n                                <span class=\"button__text\">Learn more</span>\n                                <span class=\"button__text button__text--bis\">Learn more</span>\n                            </div>\n                        </Link>\n                    </div>\n                    {/* <div className='social'>\n                        <i class=\"fab fa-facebook-f fb\" ></i>\n                        <i class=\"fab fa-instagram ig\" ></i>\n                    </div> */}\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default Main\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <div className='footer'>\n            <h5 className='footer-text'>&copy;2020 Jerk De Filet </h5>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { ToastContainer, toast, Zoom, Bounce } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nclass Notify extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: ''\n        }\n    }\n    handleChange = e => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    emailverification = () => {\n        if(this.state.email === ''){\n            toast.error('Please enter your email!')\n                }\n                else{\n                    toast.success('You will get notified!')\n                }\n    }\n    render() {\n        \n        \n        return (\n            <div className='notify-case'>\n                <div className='notify-box'>\n                    <h1 className='notify-text'>We're revamping our website</h1>\n                    <Link to='/'><i class=\"fas fa-times\"></i></Link>\n                    <h6 className='sign-text'>Sign up to be the first to know:</h6>\n                </div>\n                <div className='notify'>\n                    <div>\n                        <input type='email' placeholder='Enter your email here*' name='email' onChange={this.handleChange} required />\n                    </div>\n                    <div class=\"notify-btn\">\n                        <div className='button' onClick={this.emailverification}>\n                            <span class=\"button__mask\"></span>\n                            <span class=\"button__text\">Notify me !</span>\n                            <span class=\"button__text button__text--bis\">Notify me !</span>\n                        </div>\n                    </div>\n                </div>\n                <ToastContainer draggable={false} transition={Zoom} autoClose={8000} />\n            </div>\n        )\n    }\n}\nexport default Notify","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport Main from './Components/Main';\nimport Footer from './Components/Footer'\nimport Notify from './Components/Notify';\n\nclass App extends Component {\n  state = {\n    loading: true\n  }\n  render() {\n    return (\n\n      <BrowserRouter>\n        <div className=\"App\">\n        <Route exact path='/' component={Main} />\n          <Switch>\n            <Route exact path='/more' component={Notify} />\n          </Switch>\n          <Footer />\n        </div>\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}